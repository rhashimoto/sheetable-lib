var b=new WeakMap,u=new WeakMap,M=new FinalizationRegistry(function(e){e.abort()});function f(e,t){return e.start?.(),t?h(e,t):P(e)}function p(e){u.get(e)?.abort(),u.delete(e)}function y(e,t){return b.set(e,Array.isArray(t)?t:[...t]),e}function h(e,t){let n=new AbortController;e.addEventListener("message",async function({data:r}){if(r.close)return n.abort();try{let[s,o]=r.path.reduce(([i,c],g)=>[c,c[g]],[null,t]),a=await o.apply(s,r.args),l=b.get(a)??[];e.postMessage({id:r.id,result:a},l)}catch(s){e.postMessage({id:r.id,error:k(s)})}},{signal:n.signal}),n.signal.addEventListener("abort",function(){e.postMessage({close:!0}),e.close?.(),e.dispatchEvent?.(new Event("close"))}),u.set(e,n)}function P(e){let t=new Map,n=new AbortController;e.addEventListener("message",function({data:o}){if(o.close)return n.abort();let a=t.get(o.id);o.hasOwnProperty("result")?a.resolve(o.result):a.reject(C(o.error)),t.delete(o.id)},{signal:n.signal});function r(o,a){return new Proxy(function(){},{get(l,i,c){if(o!==""&&i!=="then")return r(c,[...a,i])},apply(l,i,c){return n.signal.aborted?Promise.reject(new Error("port closed")):new Promise(function(g,w){let v=Math.random().toString(36).slice(2);t.set(v,{resolve:g,reject:w});let m=new Set(c.map(E=>b.get(E)??[]).flat());e.postMessage({id:v,path:a,args:c},[...m])})}})}n.signal.addEventListener("abort",function(){e.postMessage({close:!0}),e.close?.(),e.dispatchEvent?.(new Event("close"));for(let o of t.values())o.reject(new Error("port closed"))});let s=r(null,[]);return M.register(s,n),u.set(s,n),u.set(e,n),s}function k(e){if(e instanceof Error){let t=new Set([...["name","message","stack"].filter(n=>e[n]!==void 0),...Object.getOwnPropertyNames(e)]);return Object.fromEntries(Array.from(t,n=>[n,e[n]]).filter(([n,r])=>{try{return structuredClone(r),!0}catch{return!1}}))}return e}function C(e){if(Object.hasOwn(e,"message")){let t=new Error(e.message);for(let[n,r]of Object.entries(e))try{t[n]=r}catch{}return t}return e}var d=new Map;function x(e){let{port1:t,port2:n}=new MessageChannel;f(t,{async openPort(r){let{port1:s,port2:o}=new MessageChannel;return d.set(r,s),s.addEventListener("message",a=>{["log","sql"].forEach((l,i)=>{a.ports[i]&&(globalThis[l]=f(a.ports[i]))})}),f(s,await e()),y(o,[o])},closePort(r){let s=d.get(r);p(s),d.delete(r)}}),window.parent.postMessage(window.location.hash,"*",[n])}export{x as register};
//# sourceMappingURL=unboxed.js.map
