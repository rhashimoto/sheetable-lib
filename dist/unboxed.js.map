{
  "version": 3,
  "sources": ["../src/proxify.ts", "../src/unboxed.js"],
  "sourcesContent": ["interface MessagePortLike {\n  postMessage: (data: any, transferables?: Transferable[]) => void\n  addEventListener: (type: \"message\", listener: (event: MessageEvent<any>) => void, options?) => void\n  removeEventListener: (type: \"message\", listener: (event: MessageEvent<any>) => void) => void\n  dispatchEvent?: (event: Event) => boolean\n\n  start?: () => void\n  close?: () => void\n}\n\nconst mapObjectToTransferables = new WeakMap<any, Transferable[]>();\nconst mapAbortControllers = new WeakMap<any, AbortController>();\n\n// Clean up when proxy is garbage collected.\nconst finalization = new FinalizationRegistry(function(abortController: AbortController) {\n  abortController.abort();\n});\n\n/**\n * @param port \n * @param target object to proxy\n * @returns Proxy when no target argument provided\n */\nexport function proxify(port: MessagePortLike, target?: Function|object) {\n  port.start?.();\n  return target ?\n    buildTarget(port, target) :\n    buildProxy(port);\n}\n\n/**\n * Terminate proxy from either side.\n * @param proxyOrPort \n */\nexport function unproxify(proxyOrPort: MessagePortLike|any) {\n  mapAbortControllers.get(proxyOrPort)?.abort();\n  mapAbortControllers.delete(proxyOrPort);\n}\n\n/**\n * Associate transferable items with an argument or return value.\n * @param obj object to be passed as an argument or return value\n * @param transferables collection of transferable items within object\n * @returns obj\n */\nexport function transfer(obj: any, transferables: Iterable<Transferable>) {\n  mapObjectToTransferables.set(\n    obj,\n    Array.isArray(transferables) ? transferables : [...transferables]);\n  return obj;\n}\n\nfunction buildTarget(port: MessagePortLike, target: Function|object) {\n  const abortController = new AbortController();\n  port.addEventListener('message', async function({ data }: MessageEvent) {\n    if (data.close) return abortController.abort();\n\n    try {\n      // Dereference the member path.\n      const [obj, member] = data.path.reduce(([_, obj], property) => {\n        return [obj, obj[property]];\n      }, [null, target]);\n\n      const result = await member.apply(obj, data.args);\n      const transferables = mapObjectToTransferables.get(result) ?? []\n      port.postMessage({ id: data.id, result }, transferables);\n    } catch (e) {\n      port.postMessage({ id: data.id, error: cvtErrorToCloneable(e) });\n    }\n  }, { signal: abortController.signal });\n\n  abortController.signal.addEventListener('abort', function() {\n    port.postMessage({ close: true });\n    port.close?.();\n    port.dispatchEvent?.(new Event('close'));\n  });\n  mapAbortControllers.set(port, abortController);\n}\n\nfunction buildProxy(port: MessagePortLike) {\n  type PromiseCallbacks = { resolve: (value: unknown) => void, reject: (reason?: any) => void };\n  const callbacks = new Map<number, PromiseCallbacks>();\n  const abortController = new AbortController();\n  port.addEventListener('message', function({ data }: MessageEvent) {\n    if (data.close) return abortController.abort();\n\n    // Settle the appropriate Promise.\n    const callback = callbacks.get(data.id);\n    if (data.hasOwnProperty('result')) {\n      callback.resolve(data.result);\n    } else {\n      callback.reject(cvtCloneableToError(data.error));\n    }\n    callbacks.delete(data.id);\n  }, { signal: abortController.signal });\n\n  function createProxy(parentProxy: any, path: (string|symbol)[]) {\n    return new Proxy(function(){}, {\n      get(_, property, receiver) {\n        // This line does nothing except prevent garbage collection of\n        // the root proxy - which would trigger port closure by the\n        // FinalizationRegistry - while any related proxies are in use.\n        if (parentProxy === '') return;\n\n        // Avoid confusing a proxy with a Promise, e.g. on return from\n        // an async function.\n        if (property === 'then') return undefined;\n\n        return createProxy(receiver, [...path, property]);\n      },\n\n      apply(_, __, args) {\n        if (abortController.signal.aborted) return Promise.reject(new Error('port closed'));\n\n        return new Promise(function(resolve, reject) {\n          const id = Math.trunc(Math.random() * Number.MAX_SAFE_INTEGER);\n          callbacks.set(id, { resolve, reject });\n\n          const transferables = new Set(args.map(arg => {\n            return mapObjectToTransferables.get(arg) ?? [];\n          }).flat());\n          port.postMessage({ id, path, args }, [...transferables]);\n        });\n      }\n    });\n  }\n\n  abortController.signal.addEventListener('abort', function() {\n    port.postMessage({ close: true });\n    port.close?.();\n    port.dispatchEvent?.(new Event('close'));\n    for (const callback of callbacks.values()) {\n      callback.reject(new Error('port closed'));\n    }\n  });\n\n  const proxy = createProxy(null, []);\n  finalization.register(proxy, abortController);\n  mapAbortControllers.set(proxy, abortController);\n  mapAbortControllers.set(port, abortController);\n  return proxy;\n}\n\n// Some browsers won't structured clone Error, so convert to POJO.\nfunction cvtErrorToCloneable(e: any) {\n  if (e instanceof Error) {\n    const props = new Set([\n      ...['name', 'message', 'stack'].filter(k => e[k] !== undefined),\n      ...Object.getOwnPropertyNames(e)\n    ]);\n    return Object.fromEntries(Array.from(props, k => \u00A0[k, e[k]])\n      .filter(([_, v]) => {\n        // Skip any non-cloneable properties.\n        try {\n          structuredClone(v);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }));\n  }\n  return e;\n}\n\n// Reconstruct Error from POJO.\nfunction cvtCloneableToError(e: any) {\n  if (Object.hasOwn(e, 'message')) {\n    const error = new Error(e.message);\n    for (const [k, v] of Object.entries(e)) {\n      try {\n        error[k] = v;\n      } catch (e) {\n        // Ignore any properties that can't be set.\n      }\n    }\n    return error;\n  }\n  return e;\n}", "import { proxify, unproxify, transfer } from './proxify.js';\n\n/** @type {Map<string,MessagePort>} */ const mapIdToPort = new Map();\n\n/**\n * @param {() => any} provideExtension\n */\nexport function register(provideExtension) {\n  const { port1, port2 } = new MessageChannel();\n  proxify(port1, {\n    /**\n     * @param {string} clientId \n     * @returns {Promise<MessagePort>}\n     */\n    async openPort(clientId) {\n      const { port1, port2 } = new MessageChannel();\n      mapIdToPort.set(clientId, port1);\n\n      // Intercept proxify calls to configure MessagePort services\n      // before the call is invoked. This handler must be installed\n      // before calling proxify().\n      port1.addEventListener('message', (event) => {\n        if (Array.isArray(event.data.args)) {\n          const services = event.data.args.shift();\n          for (const [name, port] of services) {\n            globalThis[name] = proxify(port);\n          }\n        }\n      });\n      proxify(port1, await provideExtension());\n      return transfer(port2, [port2]);\n    },\n\n    /**\n     * @param {string} clientId \n     * @returns {void}\n     */\n    closePort(clientId) {\n      const port = mapIdToPort.get(clientId);\n      unproxify(port);\n      mapIdToPort.delete(clientId);\n    }\n  });\n  window.parent.postMessage(window.location.hash, '*', [port2]);\n}\n"],
  "mappings": "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",
  "names": ["mapObjectToTransferables", "mapAbortControllers", "finalization", "abortController", "proxify", "port", "target", "buildTarget", "buildProxy", "unproxify", "proxyOrPort", "transfer", "obj", "transferables", "data", "member", "_", "property", "result", "e", "cvtErrorToCloneable", "callbacks", "callback", "cvtCloneableToError", "createProxy", "parentProxy", "path", "receiver", "__", "args", "resolve", "reject", "id", "arg", "proxy", "props", "k", "v", "error", "mapIdToPort", "register", "provideExtension", "port1", "port2", "proxify", "clientId", "event", "services", "name", "port", "transfer", "unproxify"]
}
